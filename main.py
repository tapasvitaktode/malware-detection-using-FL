from Servers import CentralizedServer, FederatedServer
from Devices import NormalDevice
from Preprocessor import is_number


def main_menu():
    print('')
    print('**************************************************************************************')
    print('           MALWARE DETECTION USING MACHINE LEARNING AND FEDERATED LEARNING')
    print('**************************************************************************************')

    print('')
    
    print('1. Start Simulation')
    print('2. End Program')
    print('--------------------------------------------------------------------------------------')
    opt = input('Select an option: ') or '2'
    print('')

    match opt:
        case '1':
            simulation_menu()

        case _:
            return


def simulation_menu():

    finished = False

    while not finished:
        print('**************************************************************************************')
        print('           SELECT WHICH TYPE OF APPROACH TO USE')
        print('**************************************************************************************')
        print('')
        
        print('1. Centralized')
        print('2. Federated')
        print('3. Finish program')
        print('--------------------------------------------------------------------------------------')
        opt = str(input('Select an option: ')).strip()
        print('')
        match opt:
            case '1':
                centralized_menu()
            case '2':
                federated_menu()
            case _:
                finished = True




def centralized_menu():

    central_server = CentralizedServer()
    device = NormalDevice(central_server)

    print('**************************************************************************************')
    print('           CENTRALIZED APPROACH SIMULATION')
    print('**************************************************************************************')
    print('')

    malware_amount = input('Amount of malware samples to use for training (max and default 3000): ') or 3000

    # Unexpected input handling
    if not is_number(malware_amount):
        malware_amount = 3000
    malware_amount = int(malware_amount)

    benign_amount = input('Amount of benign samples to use for training (max and default 3000): ') or 3000
    print('')
    # Unexpected input handling
    if not is_number(benign_amount):
        benign_amount = 3000
    benign_amount = int(benign_amount)

    central_server.init_dataset(benign_amount=benign_amount, malware_amount=malware_amount)
    device.load_samples()
    central_server.prompt_model()
    central_server.init_models()
    print('')
    central_server.train()

    # Get validation and training statistics and start device simulation
    central_server.get_stats()

    print('')

    device.start_device_simulation()


def federated_menu():

    federated_server = FederatedServer()

    print('**************************************************************************************')
    print('           FEDERATED APPROACH SIMULATION')
    print('**************************************************************************************')
    print('')


    devices_amount = input('Amount of edge devices contributing (default 5): ') or '5'

    # Unexpected input handling
    if not is_number(devices_amount):
        devices_amount = 5
    devices_amount = int(devices_amount)

    federated_server.init_edge_devices(devices_amount)
    federated_server.initial_model_settings()
    federated_server.federate()
    federated_server.federated_server_menu()


main_menu()




