import pefile
import pandas as pd
import Preprocessor as pp


subsections = ['text', 'rdata', 'data', 'pdata', 'rsrc', 'reloc']


def file_to_pe_dict(filename):
    try:
        print('Parsing ' + filename)

        pe = pefile.PE(filename)

        dictionary = dict()

        dictionary['name'] = filename

        ##############################################
        # EXTRACT DOS_HEATER FEATURES
        #############################################

        dictionary['e_magic'] = pe.DOS_HEADER.e_magic
        dictionary['e_cblp'] = pe.DOS_HEADER.e_cblp
        dictionary['e_cp'] = pe.DOS_HEADER.e_cp
        dictionary['e_crlc'] = pe.DOS_HEADER.e_crlc
        dictionary['e_cparhdr'] = pe.DOS_HEADER.e_cparhdr
        dictionary['e_minalloc'] = pe.DOS_HEADER.e_minalloc
        dictionary['e_maxalloc'] = pe.DOS_HEADER.e_maxalloc
        dictionary['e_ss'] = pe.DOS_HEADER.e_ss
        dictionary['e_sp'] = pe.DOS_HEADER.e_sp
        dictionary['e_csum'] = pe.DOS_HEADER.e_csum
        dictionary['e_ip'] = pe.DOS_HEADER.e_ip
        dictionary['e_cs'] = pe.DOS_HEADER.e_cs
        dictionary['e_lfarlc'] = pe.DOS_HEADER.e_lfarlc
        dictionary['e_ovno'] = pe.DOS_HEADER.e_ovno
        dictionary['e_oemid'] = pe.DOS_HEADER.e_oemid
        dictionary['e_oeminfo'] = pe.DOS_HEADER.e_oeminfo
        dictionary['e_lfanew'] = pe.DOS_HEADER.e_lfanew

        ################################################
        # EXTRACT FILE HEADER FEATURES
        ################################################

        dictionary['Machine'] = pe.FILE_HEADER.Machine
        dictionary['NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
        dictionary['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
        dictionary['PointerToSymbolTable'] = pe.FILE_HEADER.PointerToSymbolTable
        dictionary['NumberOfSymbols'] = pe.FILE_HEADER.NumberOfSymbols
        dictionary['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
        dictionary['Characteristics'] = pe.FILE_HEADER.Characteristics

        ####################################################
        # EXTRACT OPTIONAL HEADER FEATURES
        ####################################################

        dictionary['Magic'] = pe.OPTIONAL_HEADER.Magic
        dictionary['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        dictionary['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        dictionary['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
        dictionary['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        dictionary['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        dictionary['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        dictionary['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        dictionary['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
        dictionary['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
        dictionary['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
        dictionary['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        dictionary['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        dictionary['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
        dictionary['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
        dictionary['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        dictionary['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        dictionary['Reserved1'] = pe.OPTIONAL_HEADER.Reserved1
        dictionary['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
        dictionary['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        dictionary['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        dictionary['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
        dictionary['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
        dictionary['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve

        dictionary['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        dictionary['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        dictionary['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
        dictionary['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

        for section in pe.sections:

            name = section.Name.decode().rstrip('\x00').replace('.', '')

            if name not in subsections:
                continue

            dictionary[name + '_Misc_VirtualSize'] = section.Misc_VirtualSize
            dictionary[name + '_VirtualAddress'] = section.VirtualAddress
            dictionary[name + '_SizeOfRawData'] = section.SizeOfRawData
            dictionary[name + '_PointerToRawData'] = section.PointerToRawData
            dictionary[name + '_PointerToRelocations'] = section.PointerToRelocations
            dictionary[name + '_PointerToLinenumbers'] = section.PointerToLinenumbers
            dictionary[name + '_NumberOfRelocations'] = section.NumberOfRelocations
            dictionary[name + '_NumberOfLinenumbers'] = section.NumberOfLinenumbers
            dictionary[name + '_Characteristics'] = section.Characteristics

        print('Parsing finished')

        return dictionary

    except Exception:
        return None
    

def file_to_pe_sections(filename):
    subsections = ['text', 'rdata', 'data', 'pdata', 'rsrc', 'reloc']

    try:

        pe = pefile.PE(filename)

        dictionary = dict()
        dictionary['name'] = filename
        dictionary['type'] = 'Benign'

        for section in pe.sections:

            name = section.Name.decode().rstrip('\x00').replace('.', '')

            if name not in subsections:
                continue

            dictionary[name + '_Misc_VirtualSize'] = section.Misc_VirtualSize
            dictionary[name + '_VirtualAddress'] = section.VirtualAddress
            dictionary[name + '_SizeOfRawData'] = section.SizeOfRawData
            dictionary[name + '_PointerToRawData'] = section.PointerToRawData
            dictionary[name + '_PointerToRelocations'] = section.PointerToRelocations
            dictionary[name + '_PointerToLinenumbers'] = section.PointerToLinenumbers
            dictionary[name + '_NumberOfRelocations'] = section.NumberOfRelocations
            dictionary[name + '_NumberOfLinenumbers'] = section.NumberOfLinenumbers
            dictionary[name + '_Characteristics'] = section.Characteristics

        return dictionary

    except Exception:
        return None



def preprocess_pefile(filename):

    try:

        print('Parsing for ',filename)

        pe = pefile.PE(filename)

        dictionary = dict()

        dictionary['name'] = filename

        ##############################################
        # EXTRACT DOS_HEATER FEATURES
        #############################################

        dictionary['e_magic'] = pe.DOS_HEADER.e_magic
        dictionary['e_cblp'] = pe.DOS_HEADER.e_cblp
        dictionary['e_cp'] = pe.DOS_HEADER.e_cp
        dictionary['e_crlc'] = pe.DOS_HEADER.e_crlc
        dictionary['e_cparhdr'] = pe.DOS_HEADER.e_cparhdr
        dictionary['e_minalloc'] = pe.DOS_HEADER.e_minalloc
        dictionary['e_maxalloc'] = pe.DOS_HEADER.e_maxalloc
        dictionary['e_ss'] = pe.DOS_HEADER.e_ss
        dictionary['e_sp'] = pe.DOS_HEADER.e_sp
        dictionary['e_csum'] = pe.DOS_HEADER.e_csum
        dictionary['e_ip'] = pe.DOS_HEADER.e_ip
        dictionary['e_cs'] = pe.DOS_HEADER.e_cs
        dictionary['e_lfarlc'] = pe.DOS_HEADER.e_lfarlc
        dictionary['e_ovno'] = pe.DOS_HEADER.e_ovno
        dictionary['e_oemid'] = pe.DOS_HEADER.e_oemid
        dictionary['e_oeminfo'] = pe.DOS_HEADER.e_oeminfo
        dictionary['e_lfanew'] = pe.DOS_HEADER.e_lfanew

        ################################################
        # EXTRACT FILE HEADER FEATURES
        ################################################

        dictionary['Machine'] = pe.FILE_HEADER.Machine
        dictionary['NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
        dictionary['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
        dictionary['PointerToSymbolTable'] = pe.FILE_HEADER.PointerToSymbolTable
        dictionary['NumberOfSymbols'] = pe.FILE_HEADER.NumberOfSymbols
        dictionary['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
        dictionary['Characteristics'] = pe.FILE_HEADER.Characteristics

        ####################################################
        # EXTRACT OPTIONAL HEADER FEATURES
        ####################################################

        dictionary['Magic'] = pe.OPTIONAL_HEADER.Magic
        dictionary['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        dictionary['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        dictionary['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
        dictionary['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        dictionary['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        dictionary['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        dictionary['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        dictionary['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
        dictionary['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
        dictionary['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
        dictionary['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        dictionary['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        dictionary['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
        dictionary['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
        dictionary['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        dictionary['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        dictionary['Reserved1'] = pe.OPTIONAL_HEADER.Reserved1
        dictionary['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
        dictionary['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        dictionary['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        dictionary['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
        dictionary['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
        dictionary['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve

        dictionary['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        dictionary['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        dictionary['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
        dictionary['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

        for section in pe.sections:

            name = section.Name.decode().rstrip('\x00').replace('.', '')

            if name not in subsections:
                continue

            dictionary[name + '_Misc_VirtualSize'] = section.Misc_VirtualSize

            dictionary[name + '_VirtualAddress'] = section.VirtualAddress
            dictionary[name + '_SizeOfRawData'] = section.SizeOfRawData
            dictionary[name + '_PointerToRawData'] = section.PointerToRawData
            dictionary[name + '_PointerToRelocations'] = section.PointerToRelocations
            dictionary[name + '_PointerToLinenumbers'] = section.PointerToLinenumbers
            dictionary[name + '_NumberOfRelocations'] = section.NumberOfRelocations
            dictionary[name + '_NumberOfLinenumbers'] = section.NumberOfLinenumbers
            dictionary[name + '_Characteristics'] = section.Characteristics


        return dictionary

    except Exception:
        return None


def pefiles_to_dataset(files):

    rows = []

    for filename in files:

        pefile_dict = preprocess_pefile(filename)

        if pefile_dict is not None:
            rows.append(pefile_dict)

    default_cols = list(pp.original_features)
    default_cols.remove('type')

    pefile_df = pd.DataFrame(columns=default_cols)
    pefile_df = pefile_df.append(rows, ignore_index=True)

    names_df, pefile_df = pp.preprocess_pefile(pefile_df)

    return names_df, pefile_df





